{"categories":[{"title":"日志","uri":"https://suowei66.github.io/categories/%E6%97%A5%E5%BF%97/"}],"posts":[{"content":" 1.什么是日志 日志用来记录用户操作、系统运行状态等，是一个系统的重要组成部分。然而，由于日志通常不属于系统的核心功能，所以常常不被团队成员所重视。对于一些简单的小程序，可能并不需要在如何记录日志的问题上花费太多精力。但是对于作为基础平台为很多产品提供服务的后端程序，就必须要考虑如何依靠良好的日志来保证系统可靠的运行了。\n好的日志可以帮助系统的开发和运维人员：\n 了解线上系统的运行状态 快速准确定位线上问题 发现系统瓶颈 预警系统潜在风险 挖掘产品最大价值 ……  不好的日志导致：\n 对系统的运行状态一知半解，甚至一无所知 系统出现问题无法定位，或者需要花费巨大的时间和精力 无法发现系统瓶颈，不知优化从何做起 无法基于日志对系统运行过程中的错误和潜在风险进行监控和报警 对挖掘用户行为和提升产品价值毫无帮助 ……  2.日志中记录什么 理想的日志中应该记录不多不少的信息。\n所谓不多，是指不要在日志中记录无用的信息。实践中常见到的无用的日志有：\n 1）能够放在一条日志里的东西，放在多条日志中输出；\n2）预期会发生且能够被正常处理的异常，打印出一堆无用的堆栈；\n3）开发人员在开发过程中为了调试方便而加入的“临时”日志\n 所谓不少，是指对于日志的使用者，能够从日志中得到所有需要的信息。在实践中经常发生日志不够的情况， 例如：\n 1）请求出错时不能通过日志直接来定位问题，而需要开发人员再临时增加日志并要求请求的发送者重新发送同样的请求才能定位问题；\n2）无法确定服务中的后台任务是否按照期望执行；\n3）无法确定服务的内存数据结构的状态；\n4）无法确定服务的异常处理逻辑（如重试）是否正确执行；\n5）无法确定服务启动时配置是否正确加载；\n6）等等等等\n 3.关于日志级别 开发人员对于何种日志输出为何种级别通常有自己的理解，那在实践中，是否所有的日志级别都有必要存在，哪些操作需要记入日志，哪种错误应该记为WARN级别，而哪种错误又为ERROR级别？关于该问题，我们进行了归纳：\n DEBUG or TRACE Level：这两种日志具体的规范应该由项目组自己定义，该级别日志的主要作用是对系统每一步的运行状态进行精确的记录。通过该种日志，可以查看某一个操作每一步的执 行过程，可以准确定位是何种操作，何种参数，何种顺序导致了某种错误的发生。可以保证在不重现错误的情况下，也可以通过DEBUG（或TRACE）级别的日志对问题进行诊断。需要注意的是，DEBUG日志也需要规范日志格式，应该保证除了记录日志的开发人员自己外，其他的如运维，测试人员等也可以通过 DEBUG（或TRACE）日志来定位问题；\n  INFO Level：该种日志记录系统的正常运行状态，例如某个子系统的初始化，某个请求的成功执行等等。通过查看INFO级别的日志，可以很快地对系统中出现的 WARN,ERROR,FATAL错误进行定位。INFO日志不宜过多，通常情况下，INFO级别的日志应该不大于TRACE日志的10%；\n WARN Level：该日志表示系统可能出现问题，也可能没有，这种情况如网络的波动等。对于那些目前还不是错误，然而不及时处理也会变为错误的情况，也可以记为WARN日志，例如一个存储系统的磁盘使用量超过阀值，或者系统中某个用户的存储配额快用完等等。对于WARN级别的日志，虽然不需要系统管理员马上处理，也是需要及时查看并处理的。因此此种级别的日志也不应太多，能不打WARN级别的日志，就尽量不要打；\n ERROR Level：该级别的错误也需要马上被处理，但是紧急程度要低于FATAL级别。当ERROR错误发生时，已经影响了用户的正常访问。从该意义上来说，实际上ERROR错误和FATAL错误对用户的影响是相当的。FATAL相当于服务已经挂了，而ERROR相当于好死不如赖活着，然而活着却无法提供正常的服务，只能不断地打印ERROR日志。特别需要注意的是，ERROR和FATAL都属于服务器自己的异常，是需要马上得到人工介入并处理的。而对于用户自己操作不当，如请求参数错误等等，是绝对不应该记为ERROR日志的；\n FATAL Level：表示需要立即被处理的系统级错误。当该错误发生时，表示服务已经出现了某种程度的不可用，系统管理员需要立即介入。这属于最严重的日志级别，因此该日志级别必须慎用，如果这种级别的日志经常出现，则该日志也失去了意义。通常情况下，一个进程的生命周期中应该只记录一次FATAL级别的日志，即该进程遇到无法恢复的错误而退出时。当然，如果某个系统的子系统遇到了不可恢复的错误，那该子系统的调用方也可以记入FATAL级别日志，以便通过日志报警提醒系统管理员修复；\n  4.不断优化日志 有一点可以肯定，好的日志就像好的文章一样，绝不是一遍就可以写好的，而需要在实际的运维过程中，结合线上问题的定位，不断地进行优化。最关键的一点是，团队要重视日志优化这件事情，不要让日志的质量持续降低（当项目变大时，项目的代码也存在一样的问题，越写越乱）。\n此处有以下几个比较好的实践：\n 在定位问题的过程中完善日志，如果定位问题花费了很长时间，那就说明系统日志还存在问题，需要进一步完善和优化； 需要思考是否可以通过优化日志，来提前预判该问题是否可能发生（如某种资源耗尽而导致的错误，可以对资源的使用情况进行记录） 定义好整个团队记录日志的规范，保证每个开发记录的日志格式统一；特别需要说明的是，对于DEBUG/TRACE级别的日志，也需要定义好清晰的格式，而不是由开发人员自由发挥； 整个团队（包括开发，运维和测试）定期对记录的日志内容进行Review； 开发做运维，通过在查问题的过程来优化日志记录的方式； 运维或测试在日志中发现的问题，都需要及时向开发人员反映；  5.慢操作日志 服务在接收到一个请求的时候，记录请求的接收时间（T1），在请求处理完成待发送的时候，会记录请求发送时间（T2），通常一个请求的日志都记为INFO级别，然而当出现请求处理时间（T2-T1）超过一定时间（如10s）时，可以将该日志提升为WARN级别。通过该方法，可以预先发现系统可能存在的一些问题。\n同样的慢操作日志还可以用来记录系统一些外部依赖的处理时间，如一个服务可能依赖外部认证服务器来进行认证授权。通过记录每次认证请求的时间并将超出预期时间的请求日志采用WARN级别输出，可以尽早发现认证服务器是不是需要扩容等问题。\n慢日志的时间阈值应该是可以动态调整的，这样在进行系统优化时，可以将该报警时间阈值逐渐调小，不断地对系统进行优化。\n6.其他的注意事项 上线后日志观察 每一次上线完成后，除了对系统进行完整的回归测试外，还需要对日志进行观察，特别是当上线新功能以后，可以通过日志确认新功能是否工作正常。\n日志输出到不同的文件 在性能测试时遇到的另一个问题是，当并发量很大时，可能会有一些请求处理失败（如0.5%），为了对这些错误进行分析，需要去查这些错误请求的日志。而由于这种情况下日志量巨大，使得对错误日志的分析变得困难。\n这种情况下可以将所有的错误日志同时输出到一个单独的文件之中。\n日志文件的大小 日志文件不宜过大，过大的日志文件对于日志监控，问题定位等都会带来不便。因此需要进行日志文件的切分，日志文件应该按天来分割，还是按照小时来分割，应该根据日志量来决定，原则就是方便开发或运维人员能快速查找日志。\n为了防止日志文件将整个磁盘空间占满，需要定期对日志文件进行删除。例如，在收到磁盘报警时，可以将两个月以前的日志文件删除。此处比较好的实践是：\n 将所有日志文件收集起来，这样即使在记录日志的机器上删除，也可以通过收集的日志对之前的问题进行定位； 每天通过定时任务来删除过期日志，如每天在凌晨4点删除60天前的日志  使用占位符而不是拼接字符串 使用占位符更有利于代码的阅读，并且可以提高性能。因此你应该写这样的日志记录：\nlogger.info(\u0026quot;User {} login.\u0026quot;, userId);  而不是这样的：\nlogger.info(\u0026quot;User \u0026quot; + userId + \u0026quot; login.\u0026quot;);  日志不能打断业务逻辑 在下面的日志记录中，如果 user 为空，那么将会抛出异常，那么就会直接导致程序中断。\nlogger.info(\u0026quot;User {} login fail.\u0026quot;, user.getUserInfo);  因此在日志记录中，要避免日志中发生异常而导致正常的业务逻辑受到影响，这是绝对不允许出现的。\n7.总结  充分认识到日志对于一个可靠的后端系统的关键作用 整个团队（包括运维人员）需要对日志级别有明确的规定，什么日志输出为什么级别，什么级别的错误出现要如何处理等 需要定期对日志内容进行优化更新，目的就是通过日志快速准确地定位问题 要明确不同日志的用途，对日志内容进行分类 绝不要打印没有用的日志，防止无用日志淹没重要信息 日志信息要准确全面，努力做到仅凭日志就可以定位问题 日志的优化是一件需要持续不断投入精力的事，需要不断从错误中学习 支持动态日志输出，方便线上问题定位 新上线服务器后一定要对日志进行观察，特别地，开发人员可以通过观察日志来确认新功能是否工作正常通过日志级别的提升来发现潜在问题 对日志进行监控报警，比客户先发现系统问题 通过日志中的关键字来确定系统的运行状态 日志格式要统一规范 将错误日志输出到一个单独的文件中进行分析 要把日志的大小，如何切分，如何删除等作为规范建立起来  ","id":0,"section":"posts","summary":"1.什么是日志 日志用来记录用户操作、系统运行状态等，是一个系统的重要组成部分。然而，由于日志通常不属于系统的核心功能，所以常常不被团队成员所","tags":["log"],"title":"如何记日志","uri":"https://suowei66.github.io/2019/11/d8e2180a/","year":"2019"}],"tags":[{"title":"log","uri":"https://suowei66.github.io/tags/log/"}]}